
import React, { useState } from 'react';
import { Card } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Checkbox } from '@/components/ui/checkbox';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

const PostIntervention: React.FC = () => {
  const [conditions, setConditions] = useState({
    abdominalPain: false,
    bleeding: false,
    other: false,
    otherDescription: ''
  });

  const handleConditionChange = (condition: string, checked: boolean) => {
    setConditions(prev => ({
      ...prev,
      [condition]: checked
    }));
  };

  return (
    <div className="space-y-6">
      <Card className="p-6 bg-white border border-[color:var(--card-border)]">
        <h2 className="text-xl font-semibold mb-6 text-[color:var(--text-accent)]">
          H·∫≠u Can thi·ªáp
        </h2>

        {/* T√¨nh tr·∫°ng sau can thi·ªáp */}
        <div className="space-y-4 mb-6">
          <h3 className="text-lg font-semibold text-[color:var(--text-accent)]">
            T√¨nh tr·∫°ng sau can thi·ªáp
          </h3>
          <div className="space-y-3">
            <div className="flex items-center space-x-3">
              <Checkbox
                id="abdominalPain"
                checked={conditions.abdominalPain}
                onCheckedChange={(checked) => handleConditionChange('abdominalPain', !!checked)}
                className="data-[state=checked]:bg-[color:var(--deep-taupe)] data-[state=checked]:border-[color:var(--deep-taupe)]"
              />
              <label htmlFor="abdominalPain" className="font-medium">
                ƒêau b·ª•ng
              </label>
            </div>
            <div className="flex items-center space-x-3">
              <Checkbox
                id="bleeding"
                checked={conditions.bleeding}
                onCheckedChange={(checked) => handleConditionChange('bleeding', !!checked)}
                className="data-[state=checked]:bg-[color:var(--deep-taupe)] data-[state=checked]:border-[color:var(--deep-taupe)]"
              />
              <label htmlFor="bleeding" className="font-medium">
                Ra m√°u
              </label>
            </div>
            <div className="flex items-center space-x-3">
              <Checkbox
                id="other"
                checked={conditions.other}
                onCheckedChange={(checked) => handleConditionChange('other', !!checked)}
                className="data-[state=checked]:bg-[color:var(--deep-taupe)] data-[state=checked]:border-[color:var(--deep-taupe)]"
              />
              <label htmlFor="other" className="font-medium">
                Kh√°c
              </label>
            </div>
            {conditions.other && (
              <div className="ml-6 space-y-2">
                <Label>M√¥ t·∫£ chi ti·∫øt</Label>
                <Input
                  placeholder="Nh·∫≠p m√¥ t·∫£..."
                  value={conditions.otherDescription}
                  onChange={(e) => setConditions(prev => ({...prev, otherDescription: e.target.value}))}
                  className="border-[color:var(--card-border)]"
                />
              </div>
            )}
          </div>
        </div>

        {/* X√©t nghi·ªám Œ≤-hCG */}
        <div className="space-y-4 mb-6">
          <h3 className="text-lg font-semibold text-[color:var(--text-accent)]">
            X√©t nghi·ªám Œ≤-hCG
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="space-y-2">
              <Label>Ng√†y x√©t nghi·ªám</Label>
              <Input type="date" className="border-[color:var(--card-border)]" />
            </div>
            <div className="space-y-2">
              <Label>K·∫øt qu·∫£</Label>
              <Input placeholder="Nh·∫≠p k·∫øt qu·∫£..." className="border-[color:var(--card-border)]" />
            </div>
            <div className="space-y-2">
              <Label>ƒê√°nh gi√°</Label>
              <Select>
                <SelectTrigger className="border-[color:var(--card-border)]">
                  <SelectValue placeholder="Ch·ªçn ƒë√°nh gi√°" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="pregnant">C√≥ thai</SelectItem>
                  <SelectItem value="not-pregnant">Kh√¥ng c√≥ thai</SelectItem>
                  <SelectItem value="suspicious">Nghi ng·ªù</SelectItem>
                  <SelectItem value="biochemical">Thai h√≥a sinh</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </div>

        {/* ƒê√°nh gi√° hi·ªáu qu·∫£ */}
        <div className="space-y-4 mb-6">
          <h3 className="text-lg font-semibold text-[color:var(--text-accent)]">
            üìä ƒê√°nh gi√° hi·ªáu qu·∫£
          </h3>
          <Select>
            <SelectTrigger className="border-[color:var(--card-border)]">
              <SelectValue placeholder="Ch·ªçn ƒë√°nh gi√° hi·ªáu qu·∫£" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="pregnant">ƒê·∫≠u thai</SelectItem>
              <SelectItem value="not-pregnant">Kh√¥ng ƒë·∫≠u</SelectItem>
              <SelectItem value="suspicious">Nghi ng·ªù</SelectItem>
              <SelectItem value="early-miscarriage">S·∫©y thai s·ªõm</SelectItem>
            </SelectContent>
          </Select>
        </div>

        {/* H∆∞·ªõng d·∫´n ti·∫øp theo */}
        <div className="space-y-4">
          <h3 className="text-lg font-semibold text-[color:var(--text-accent)]">
            üíä H∆∞·ªõng d·∫´n ti·∫øp theo
          </h3>
          <div className="space-y-4">
            <div className="space-y-2">
              <Label>üìù Thu·ªëc c·∫ßn u·ªëng</Label>
              <Textarea
                placeholder="Nh·∫≠p th√¥ng tin thu·ªëc, li·ªÅu d√πng, s·ªë ng√†y..."
                className="min-h-[100px] border-[color:var(--card-border)]"
              />
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label>üìÖ Ng√†y t√°i kh√°m d·ª± ki·∫øn</Label>
                <Input type="date" className="border-[color:var(--card-border)]" />
              </div>
            </div>
            <div className="space-y-2">
              <Label>üìé Ghi ch√∫ th√™m</Label>
              <Textarea
                placeholder="Ghi ch√∫ b·ªï sung (t√πy ch·ªçn)..."
                className="border-[color:var(--card-border)]"
              />
            </div>
          </div>
        </div>

        <div className="flex justify-end pt-6">
          <Button className="bg-[color:var(--button-primary-bg)] hover:bg-[color:var(--button-hover-bg)] text-[color:var(--button-primary-text)] px-8 py-2">
            L∆∞u h·ªì s∆°
          </Button>
        </div>
      </Card>
    </div>
  );
};

export default PostIntervention;
